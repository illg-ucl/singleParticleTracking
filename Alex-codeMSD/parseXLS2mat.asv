function tracks = parseXLS2mat(file)
%
% Function to parse the structures created by Isabel's tracking code
% (29/09/2011) to a struct file as used by Alex.
%
% Revised - 14-10-11.
% Few changes and commented by Isabel 18-October-2011.
%
% The input file is an excel file with the full trajectories as output by
% function "showTrajectsOnSequence".

% -----------------------------------------------
% PARAMETERS: 

tsamp = 1; % Set this to the correct sampling time. This is used to calibrate the absolute time later on. It is the time between frames.

% -----------------------------------------------


% Dependencies: xlsread.mat
% Check dependencies:
if 2~=exist('xlsread') 
    error('Check file dependencies - you need to install xlsread'); 
end

% Open and read the data:
[NUMERIC,TXT,RAW]=xlsread(file);

% Import the column heads and assign ID
colheads = TXT;

% The column titles are 'CentreX','CentreY','IspTot','rsqFit','SigmaFit','I0Fit','BgNoiseStd','IbgAvg','IbgTot'
% 'SNR','IinnerTot','ClipFlag','noConverge','TrajNumber','FrameNumber','SpotNumber'.

% Generate ID: ID is a structure with fiels with the same names as the
% column titles, and each has an ID value of 1, 2, 3, etc (see below).
for i=1:numel(colheads) 
    ID.(colheads{i}) = find(strcmp(TXT,colheads{i})); 
end
% eg. ID = 
%         CentreX: 1
%         CentreY: 2
%          IspTot: 3
%          rsqFit: 4
%        SigmaFit: 5
%           I0Fit: 6
%      BgNoiseStd: 7
%          IbgAvg: 8
%          IbgTot: 9
%             SNR: 10
%       IinnerTot: 11
%        ClipFlag: 12
%      noConverge: 13
%      TrajNumber: 14
%     FrameNumber: 15
%      SpotNumber: 16

% Write into a structure file as used by Alex

% The trajectory column:
traj = NUMERIC(:,ID.TrajNumber); % NUMERIC is the numeric data read from the excel file (without the row of column titles).

disp('File Loaded successfully!');

% Get individual tracks.

% List the points at which the trajectory number first appears:
[A,I,J] = unique(traj,'first'); % [A,I,J] = UNIQUE(traj,'first') returns the vector I to index the first occurrence of each unique value in traj.  
% A has the same values as in traj but with no repetitions. A will also be sorted.
% List the points at which the trajectory number last appears:
[A,Y,Z] = unique(traj,'last'); % UNIQUE(traj,'last'), returns the vector Y to index the last occurrence of each unique value in traj.

% Get the number of tracks (no. of different trajectories):
numtracks = numel(A);


% Create tracks structure:
tracks(1:numtracks) = struct('XLS',[],'xvalues',[],'yvalues',[],'intensity',[],'msd_unavg',[],'timeabs',[],'timerel',[],'numel',[],'timediff',[],'msd',[],'errorMsd',[],'errorMsdRelPercent',[],'disp',[]);

for i=1:numtracks 
    a = I(i); % index for starting point in trajectory.
    b = Y(i); % index for ending point in trajectory.
    
    % Delete tracks that are less than 5 data points long:
    if b-a+1>=5  % Only analyse tracks which have at least 5 points (frames) in them.
    
    data{i} = NUMERIC(a:b,:);
    tracks(i).XLS.track_index = A(i);
    tracks(i).xvalues = data{i}(1:end,ID.CentreX);
    tracks(i).yvalues = data{i}(1:end,ID.CentreY);
    % Set origin to zero:
    tracks(i).xvalues = tracks(i).xvalues - (tracks(i).xvalues(1));
    tracks(i).yvalues = tracks(i).yvalues - (tracks(i).yvalues(1));
    tracks(i).intensity = data{i}(1:end,ID.IspTot); % Note: we want to use IspTot (integrated spot intensity) and not I0Fit. Isabel.    
    tracks(i).msd_unavg = tracks(i).xvalues.^2+tracks(i).yvalues.^2; % squared displacement from the origin: x^2 + y^2.
    tracks(i).timeabs = data{i}(1:end,ID.FrameNumber).*tsamp; % tsamp is the time between frames.
    tracks(i).timerel = tracks(i).timeabs-tracks(i).timeabs(1); % Set the first frame analysed as time zero reference. 
    tracks(i).numel = b-a+1; % Number of points in the track. Isabel: it used to be b-a, I changed it to b-a+1.
    tracks(i) = getDisplacement(tracks(i));
    
%     else
%         % save indices to delete later:
%         del(i) = i;     
    end
    
end

% % Delete tracks which were too short: 
% tracks(find(del))=[];



% Examples of how to run this function:
% Go to the directory where the .xls file which contains the trajectory data is and then for example, make a FILELIST:
% FILELIST = dir('*.xls')
% Then to analyse the first excel file in that list do:
% output = parseXLS2mat(FILELIST(1).name);
% output is a structure with fields XLS
%     XLS: (can obtain traj number from here)
%     xvalues 
%     yvalues
%     intensity
%     msd_unavg 
%     timeabs: absolute time (equal to frame number only if tsamp=1.), in seconds if appropriate tsamp (time between frames in seconds) is chosen.
%     timerel: same as timeabs but all times relative to that of the first data point in trajectory. So first one is always zero.
%     numel : number of points in the track
%     disp : cell structure: complete list of pair-wise displacements (x and y), and delta
%        time before averaging for each delta t (see getDisplacement).
%        eg: output.disp{1} is a cell structure with fields 'xdiff', 'ydiff' and
%        'tdiff' (see getDisplacement). Eg, output.disp{1}.tdiff is the
%        delta time for the differences for the first delta t,
%        output.disp{2} is the second set, etc...
%     msd: average mean square displacements for each delta t.
%     timediff: delta t: time difference (in frames).
% Example of how to produce plots:    
% subplot(2,2,1);plot(output(2).timeabs,output(2).xvalues);title('x vs frame number');...
% subplot(2,2,3);plot(output(2).timeabs,output(2).yvalues);title('y vs frame number');...
% subplot(2,2,2);plot(output(2).timeabs,output(2).intensity,'g--x');title('Intensity vs frame number');...
% subplot(2,2,4);plot(output(2).timediff,output(2).msd,'r--x');title('Avge
% Mean Square Displacements vs Delta t (frames)');
