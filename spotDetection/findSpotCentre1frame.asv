function spot = findSpotCentre1frame(image_data,x_estimate,y_estimate,subarray_halfsize,inner_radius,sigma_gauss)
% Function to iteratively find the centre of a fluorescence spot on an image.
% Created by Isabel (2011).
% 
% Inputs:  
% image_data is a matrix containing the image data for a single frame. 
% image_data is of class double, with original values, so not the grayscale version between 0 and 1. 
% It can be the output of extract1frame(frame_number), for example.
%
% x_estimate, y_estimate are the initial estimated centre positions for the
% iterative method.
%
% subarray_halfsize: the algorithm selects this number of pixels above and below and to
% left and right of estimated centroid pixel to form the selected image
% subarray (I). (The default value is 8 pixels).
%
% inner_radius: radius of inner circular mask in pixels (default is 5 pixels). This mask moves
% around inside the subarray to find the bright spot.
%
% sigma_gauss: sigma of gaussian mask in pixels (default is 2 pixels).
%
% Outputs: values resulting from the iterative method. The output is a
% structure "spot" with the following fields (see end of file).
%
% Example of how to call this function: s1 = findSpotCentre1frame(A,271,364,8,5,2), 
% where A is the image array (single frame data). Then to obtain results
% from the structure s1, do, for example: s1.CentreX, s1.CentreY,
% s1.SigmaFit, s1.I0Fit, etc.


d = subarray_halfsize; % subarray halfsize. d needs to be at least equal to the radius of the inner mask, inner_radius. Default: d=8, inner_radius=5.

%-----------------------
% error control:
if subarray_halfsize < inner_radius
    error('findSpotCentre1frame:one','check input parameters: "subarray_halfsize" cannot be smaller than "inner_radius"')
end

% If the spot candidate is at the edge of the image move it away from the edge until we can take a
% subarray around it:
if (round(y_estimate)-d)<1
    y_estimate = d+1;
end
if (round(y_estimate)+d)>size(image_data,1)
    y_estimate = size(image_data,1)-d;
end
if (round(x_estimate)-d)<1
    x_estimate = d+1;
end
if (round(x_estimate)+d)>size(image_data,2)
    x_estimate = size(image_data,2)-d;
end    
%------------------------

% PARAMETERS FOR FINAL GAUSSIAN FITTING OF SPOT:
% Set fit constrains: upper and lower bounds for fit parameters I0 and sigma_fit:
min_I0 = 0; 
max_I0 = Inf; % unconstrained.
min_sigma_fit = 0.5; % rather generous limits here.
max_sigma_fit = 6; % rather generous limits here.

% Set starting guesses for fit:
guess_sigma_fit = 3;
% guess for I0 is the max value of I in the background corrected image
% subarray.
% -----------------------

% create image subarray (I) of size (2*d+1)x(2*d+1) (default size 17x17) centred on the
% centroid estimate pixel (x_estimate,y_estimate). I is fixed during the iterative process of finding the centre of the bright spot.
I = image_data(round(y_estimate)-d:round(y_estimate)+d,round(x_estimate)-d:round(x_estimate)+d);

% Create matrices containing the x and y positions corresponding to the
% subarray I. Xs is a matrix of the same size as I, containing x values for
% all pixels and similarly for Ys.
[Xs,Ys] = meshgrid(round(x_estimate)-d:round(x_estimate)+d,round(y_estimate)-d:round(y_estimate)+d);


% Initialisation values:
k = 1; % index for iteration loop to find centre position of bright spot.
error1 = 1; % initialisation value to get inside loop.
clipping_flag = 0;  % initialise to zero to get inside loop.
x_centre = x_estimate;
y_centre = y_estimate;
list_Xcentre = [x_estimate];
list_Ycentre = [y_estimate];
list_deltaX = [];
list_deltaY = [];
list_error1 = [];
list_iteration = [0];
list_clip_flag = [0];
list_Ibg = []; % Average background intensity in image subarray.
list_Isp = []; % Total intensity within the spot (inner circle) mask in subarray, background corrected.
list_Itot = []; % Total subarray image intensity, background corrected. 
% The previous lists are there to keep track of the convergence of the method over
% the several iterations.

while (error1>0.05 || k<11) && clipping_flag==0 % at least 10 iterations. Method convergence criterion is error1 (see below)<=0.05 pixels. Stop iterations if clipping flag goes on.
    %
    % % Size of mask matrix is 2*radius+1. All elements in fspecial('disk',5) are between 0 and 1 and the sum of all elements is 1.
    % % the ~=0 gives matrix with 1 at positions of elements different from 0, so it gives a circular mask of ones.
    % % inner_mask_0 = fspecial('disk',5)~=0;
    % % inner_mask_0 = padarray(inner_mask_0,[3,3]); % pad the previous matrix
    % % with zeros around it to get to a matrix of the same size as I.

    % Create inner circle mask: circle of radius 5 pixels, with ones inside and zeros outside.
    % This mask can move around inside the fixed image subarray I.
    % In the same loop (to save time): Create Gaussian mask of sigma=3pixels, centred on (x_centre,y_centre),
    % with matrix size (2*d+1)x(2*d+1) (default size 17x17).                    ((mask_gauss = fspecial('gaussian',17,3);))
    inner_mask = zeros(size(I,1)); % pre-define inner_mask size.
    % radius of inner circle mask is inner-radius. Default is 5 pixels.
    mask_gauss = zeros(size(I,1)); % pre-define mask_gauss size.
    % default fixed gaussian width is sigma_gauss = 3 pixels. 
    for ii = 1:size(I,1) % ii = index for rows
        for jj = 1:size(I,2) % jj = index for columns
            % inner circle mask: if distance to point (x_centre,y_centre) is <=inner_radius, then 1, otherwise, 0:
            sum_sq = (Xs(ii,jj)-x_centre)^2 + (Ys(ii,jj)-y_centre)^2;
            if round(sqrt(sum_sq))<=inner_radius 
                inner_mask(ii,jj)=1; 
            else
                inner_mask(ii,jj)=0; 
            end
            % gaussian mask:
            mask_gauss(ii,jj) = exp(-sum_sq/(2*sigma_gauss^2)); 
        end
    end
    mask_gauss = mask_gauss/sum(sum(mask_gauss)); % normalise the Gaussian mask at the end.

    % The background mask is just the negative of the inner circle mask, i.e.,
    % not-inner_mask_0. It has zeros in centre and ones in surrounding pixels.
    bgnd_mask = double(~inner_mask); % make of class double (not binary) for what follows.
    
    pos_bgnd = find(bgnd_mask==1); % positions of bgnd only intensities in bgnd mask.
    Ibgnd = I.*bgnd_mask; % bgnd region.
    median(Ibgnd(pos_bgnd)) % use median instead of mean for the bgnd to exclude hot pixels or nearby bright spots.
    % ----------------------------------------
    % Total background intensity in background region before background correction:
    % Ibg_tot = sum(sum(I.*bgnd_mask)); % this gives same result.
    Ibg_tot = sum(Ibgnd(pos_bgnd));
    % Average background intensity in bgnd region, per pixel, Ibg_avg.
    % The number of pixels in the background mask equal to 1 is
    % length(find(bgnd_mask~=0)):
    Ibg_avg = Ibg_tot/length(find(bgnd_mask~=0)); % this is a scalar.
    % Total intensity in inner mask region before background correction:
    Iinner_tot = sum(sum(I.*inner_mask));
    %
    % Calculate background-corrected subarray image:
    I2 = I-Ibg_avg;
    % Calculate standard deviation of remaining noise in background
    % corrected image I2:
    bg_noise_std = std2(I2.*bgnd_mask); % standard deviation of matrix elements in bgnd region.
    % Total spot intensity (within the inner circle mask), background corrected:
    Isp = sum(sum(I2.*inner_mask));     
    % -----------------------------------------
    
    % Calculate product of background-corrected image and Gaussian mask:
    I3 = I2.*mask_gauss;
    
    % Calculate revised estimates of x and y centre positions by multiplying I2 by
    % a Gaussian mask (result is I3) and weighing positions by the intensity value in that result:
    x_centre_new = sum(sum(I3.*Xs))/sum(sum(I3));
    y_centre_new = sum(sum(I3.*Ys))/sum(sum(I3));
    
    delta_x = x_centre_new - x_centre; % rounded to integer pixels
    delta_y = y_centre_new - y_centre;
    
    % error1 is the error deviation used to decide if the method has converged or not:
    error1 = sqrt(delta_x^2 + delta_y^2); % error 1 is the distance in pix between old and new centroid estimates.
    % error1 = abs(delta_x) + abs(delta_y); % this is an alternative error that could be considered.
    
    % disp(['delta x = ',num2str(delta_x)])
    % disp(['delta y = ',num2str(delta_y)])
    % disp(['error deviation = ',num2str(error1)])
    
    % -----------------------------------------------------
    % Clipping flag: 
    % If the inner circle mask moves too far away from the fixed centre of
    % the image subarray, i.e., if the inner-circle mask clips the edge of
    % the square subarray, the "Clipping flag" goes on and takes a value of
    % 1. Otherwise, it is zero. A clipping flag value of 1 indicates the
    % found spot is not very reliable.
    d_found_centre_x = abs(x_centre_new - x_estimate); 
    d_found_centre_y = abs(y_centre_new - y_estimate); 
    
    if d_found_centre_x >(subarray_halfsize-inner_radius+1) || d_found_centre_y >(subarray_halfsize-inner_radius+1) % inner mask clips edge of subarray.
        clipping_flag = 1;
    else
        clipping_flag = 0;
    end
    % -----------------------------------------------------
    
    % update lists:
    list_Xcentre(k+1) = x_centre_new;
    list_Ycentre(k+1) = y_centre_new;
    list_deltaX(k) = delta_x;
    list_deltaY(k) = delta_y;
    list_error1(k) = error1;
    list_clip_flag(k) = clipping_flag;
    list_iteration(k+1) = k;
 
    list_Ibg(k) = Ibg_avg; % Average background intensity in image subarray.
    list_Isp(k) = Isp; % Total intensity within the spot (inner circle) mask in subarray, background corrected.
    
    % re-asign values for next iteration:
    x_centre = x_centre_new;
    y_centre = y_centre_new;
    k = k+1;
    
    % prevent infinite loop:
    if k>300
        % disp('The method did not reach convergence after 300 iterations.')
        noConvergenceFlag = 1;
        % Note that in this case the following break gets us out of the
        % loop.
        break
    else
        noConvergenceFlag = 0;
    end   
    
end


if noConvergenceFlag == 1 % if method did not converge:
    % Output of the function is a structure "spot" with all fields equal to 0 except for the "noConverge" flag:
    spot.CentreX = 0; 
    spot.CentreY = 0; 
    spot.IspTot = 0; 
    spot.rsqFit = 0; 
    spot.SigmaFit = 0; 
    spot.I0Fit = 0; 
    spot.BgNoiseStd = 0; 
    spot.IbgAvg = 0;
    spot.IbgTot = 0; 
    spot.SNR = 0;
    spot.IinnerTot = 0; 
    spot.ClipFlag = 0;
    spot.noConverge = 1;
    spot.TrajNumber = []; % add field "trajectory number" for later, for function FindTrajects.m.
else
    % Finding sigma of bright spot at the final found centre position (1D fit):
    % The last background-corrected subarray image is I2.
    % Calculate distance, r, of all pixels in I2 to the found centre, put contents
    % in a row vector of size size(I2,1)xsize(I2,2) and fit the long vector to
    % a Gaussian Ibgbis+I0*exp(-r^2/(2*sigma^2)):
    r_matrix = zeros([numel(I2) 1]); % prealocate column vector of distance-to-centre values (predefine size for speed).
    data_to_fit = zeros([numel(I2) 1]); % idem for the intensity data.
    for p = 1:numel(I2) %numel(I2) is the total number of elements in I2, i.e., size(I2,1)*size(I2,2).
        r_matrix(p) = sqrt((Xs(p)-x_centre)^2 + (Ys(p)-y_centre)^2); % distance to found centre.
        data_to_fit(p) = I2(p);
    end
    fun_for_fit = fittype('I0*exp(-r^2/(2*sigma_spot^2))','independent','r'); % define Gaussian funtion to fit to, with 'r' as independent variable;
    options = fitoptions('Method','NonlinearLeastSquares'); % Creates a structure of fit options with fields StartPoint, Lower, Upper, etc.
    options.StartPoint = [max(data_to_fit) guess_sigma_fit]; % give guess parameters for fit. This avoids a warning message. Guess for I0 is max(data_to_fit) and guess for sigma_spot is guess_sigma_fit (see PARAMETER SECTION at beginning of this file).
    options.Lower = [min_I0 min_sigma_fit]; % Lower bounds for fit parameters (see PARAMETER section at beginning of this file).
    options.Upper = [max_I0 max_sigma_fit]; % Upper bounds for fit parameters (see PARAMETER section at beginning of this file).
    [fit_result gof] = fit(r_matrix,data_to_fit,fun_for_fit,options); % do fit. fit_result contains the fit coefficient values and their confidence intervals and "gof" gives the good of fitness.
    % fit_param_names = coeffnames(fit_result); % fit parameter names to
    % know their order: first one is I0, second one is sigma_spot.
    fit_param_values = coeffvalues(fit_result); % parameter values resulting from fit. First one is I0, second one is sigma_spot.
    I0_spot_fit = fit_param_values(1); % I0 intensity value from fit.
    sigma_spot_fit = fit_param_values(2); % Sigma of Gaussian fit to background-corrected subarray, I2.
    rsq_fit = gof.rsquare; % rsquare coefficient of fit.
    % errors = confint(fit_result,0.682); % 68.2% confidence interval for each fit parameter (lower and upper bounds as first and second rows).
    % errorSTDEV = (errors(2,:)-errors(1,:))/2; % Standard deviation of each fit parameter (probability to be between -STDEV and +STDEV is 68.2%).
    
    
    % -----------------------------------------------
    % Output of the function:
    % The output is a structure "spot" with the following fields:
    spot.CentreX = x_centre; % x-centre result found
    spot.CentreY = y_centre; % y-centre result found
    spot.IspTot = Isp; % Total intensity within the spot (inner circle) mask in subarray, background corrected.
    spot.rsqFit = rsq_fit; % rsquare coefficient for goodness of fit.
    spot.SigmaFit = sigma_spot_fit; % Sigma of Gaussian fit to background-corrected subarray, I2.
    spot.I0Fit = I0_spot_fit; % I0 of Gaussian fit to background-corrected subarray, I2.
    spot.BgNoiseStd = bg_noise_std; % standard deviation of matrix elements in bgnd region only, after background-offset subtraction.
    spot.IbgAvg = Ibg_avg; % Average (per pixel) background intensity offset in original image subarray, before background correction.
    spot.IbgTot = Ibg_tot; % Total background intensity in background region in original image subarray, before background correction.
    spot.SNR = I0_spot_fit/bg_noise_std; % we define this signal-to-noise ratio.
    spot.IinnerTot = Iinner_tot; % Total intensity inside inner mask region in original image subarray, before background subtraction.
    spot.ClipFlag = clipping_flag;
    spot.noConverge = 0;
    spot.TrajNumber = []; % add field "trajectory number" for later, for function FindTrajects.m.
end
% -----------------------------------------------



% -----------------------------------------------------------------------
% Auxiliary stuff below:

% Graphic check of fit:
if spot.ClipFlag == 0 && spot.SigmaFit<4 && spot.SigmaFit>2 && spot.SNR>=2.7
    figure; plot(r_matrix,data_to_fit,'*'); hold on; plot(fit_result); hold off;% check fit result graphically.
end

% Plot things:
subplot(2,3,1); imshow(I,[],'InitialMagnification',1000); title('original image subarray');
subplot(2,3,2); imshow(inner_mask,[],'InitialMagnification',1000); title('inner circle mask');
subplot(2,3,3); imshow(bgnd_mask,[],'InitialMagnification',1000); title('background mask');
subplot(2,3,4); imshow(I2,[],'InitialMagnification',1000); title('bgnd corrected image');
subplot(2,3,5); imshow(mask_gauss,[],'InitialMagnification',1000); title('gaussian mask');
subplot(2,3,6); imshow(I2.*mask_gauss,[],'InitialMagnification',1000); title('gauss*bgnd-corrected');
% 
% % % Return result:
% % disp(['new x_centre estimate = ',num2str(x_centre_new)])
% % disp(['new y_centre estimate = ',num2str(y_centre_new)])
% % 
% % % Output values for checking convergence:
% % disp(list_iteration)
% % disp(list_Xcentre)
% % disp(list_Ycentre)
% % disp(list_deltaX)
% % disp(list_deltaY)
% % disp(list_error1)
% 
% % Display results graphically for checking convergence:
% figure
% subplot(5,1,1); plot(list_iteration,list_Xcentre); title('Xcentre vs iteration');
% subplot(5,1,2); plot(list_iteration,list_Ycentre); title('Ycentre vs iteration');
% subplot(5,1,3); plot(list_iteration(2:end),list_deltaX); title('deltaX vs iteration');
% subplot(5,1,4); plot(list_iteration(2:end),list_deltaX); title('deltaY vs iteration');
% subplot(5,1,5); plot(list_iteration(2:end),list_error1); title('error1 vs iteration');
% %
% figure 
% subplot(3,1,1); plot(list_iteration(2:end),list_Ibg); title('Ibgnd vs iteration');
% subplot(3,1,2); plot(list_iteration(2:end),list_Isp); title('Ispot vs iteration');
% subplot(3,1,3); plot(list_iteration(2:end),list_clip_flag); title('clipping flag');
% 
% Images of results:
figure
imshow(image_data,[],'InitialMagnification',150);
hold;
plot(x_centre,y_centre,'o','Color','r','MarkerSize',8); title('obtained centre')
hold off;

figure
imshow(I,[],'InitialMagnification',1000);
hold;
plot(x_centre-x_estimate+d+1,y_centre-y_estimate+d+1,'o','Color','r','MarkerSize',70); title('obtained centre')
hold off;